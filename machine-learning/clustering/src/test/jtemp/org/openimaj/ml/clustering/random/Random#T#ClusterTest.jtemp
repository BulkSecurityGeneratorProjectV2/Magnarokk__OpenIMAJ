/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.ml.clustering.random;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Random;

import static org.junit.Assert.*;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import org.openimaj.io.IOUtils;
import org.openimaj.data.RandomData;

/**
 * Set of tests for the random cluster implementations
 * 
 * @author Jonathon Hare <jsh2@ecs.soton.ac.uk>, Sina Samangooei <ss@ecs.soton.ac.uk>
 *
 */
public class Random#T#ClusterTest {
	/**
	 * Temporary directory for IO tests
	 */
    @Rule
    public TemporaryFolder folder = new TemporaryFolder();
        
	/**
	 * Test the simple cluster algorithm
	 * @throws IOException
	 */
	@Test public void testRandom#T#Cluster() throws IOException{
		#t# [][] data = {
				{0,0,0},
				{0,0,0},
				{0,0,-1},
				{-1,0,-1},
				{1,0,1},
				{2,2,2},
				{2,2,2},
				{3,2,2},
				{3,2,3},
				{1,2,1},
		};
		
		Random#T#Cluster s = new Random#T#Cluster(data[0].length);
		s.setSeed(2);
		int[] trainDataIndex = RandomData.getUniqueRandomIntsA(2, 0, data.length, new Random(2));
		#t#[][] trainData = new #t#[trainDataIndex.length][];
		for(int i = 0; i < trainDataIndex.length; i++){
			trainData[i] = data[trainDataIndex[i]];
		}
		s.train(trainData);
		s.optimize(false);
		
		int[] pushed = s.push(data);
		System.out.println(Arrays.toString(pushed));
		for(#t#[] cl : s.getClusters()){
			System.out.println(Arrays.toString(cl));
		}
		
		File outFile = folder.newFile("Random#T#.cluster");
		File outSFile = folder.newFile("Random#T#Saveable.cluster");
		IOUtils.writeASCII(outFile, s);
		IOUtils.writeBinary(outSFile, s);
		
		Random#T#Cluster sLoaded = IOUtils.read(outFile,new Random#T#Cluster());
		sLoaded.optimize(false);
		Random#T#Cluster ssaveLoaded = IOUtils.read(outSFile,new Random#T#Cluster());
		ssaveLoaded .optimize(false);
		
		int[] loadedPushed = sLoaded.push(data);
		int[] loadedSaveablePushed = ssaveLoaded.push(data);
		
		assertArrayEquals(loadedPushed,pushed);
		assertArrayEquals(loadedSaveablePushed,pushed);		
	}

	/**
	 * tests the random set cluster algorithm
	 * @throws IOException
	 */
	@Test public void testRandomSet#TT#Cluster() throws IOException{
		#t# [][] data = {
				{0,0,0},
				{0,0,0},
				{0,0,-1},
				{-1,0,-1},
				{1,0,1},
				{2,2,2},
				{2,2,2},
				{3,2,2},
				{3,2,3},
				{1,2,1},
		};
		Random#T#Cluster s = new RandomSet#T#Cluster(data[0].length);
		s.setSeed(2);
		int[] trainDataIndex = RandomData.getUniqueRandomIntsA(2, 0, data.length, new Random(2));
		#t#[][] trainData = new #t#[trainDataIndex.length][];
		for(int i = 0; i < trainDataIndex.length; i++){
			trainData[i] = data[trainDataIndex[i]];
		}
		s.train(trainData);
		s.optimize(false);
		int[] pushed = s.push(data);
		System.out.println(Arrays.toString(pushed));
		for(#t#[] cl : s.getClusters()){
			System.out.println(Arrays.toString(cl));
		}
		
		File outFile = folder.newFile("Random#T#2.cluster");
		File outSFile = folder.newFile("Random#T#Saveable2.cluster");
		IOUtils.writeASCII(outFile, s);
		IOUtils.writeBinary(outSFile, s);
		
		Random#T#Cluster sLoaded = IOUtils.read(outFile,new Random#T#Cluster());
		sLoaded.optimize(false);
		Random#T#Cluster ssLoaded = IOUtils.read(outSFile,new Random#T#Cluster());
		ssLoaded.optimize(false);
		
		int[] loadedPushed = sLoaded.push(data);
		int[] loadedSPushed = ssLoaded.push(data);
		
		assertArrayEquals(loadedPushed,pushed);
		assertArrayEquals(loadedSPushed,pushed);		
	}
}
