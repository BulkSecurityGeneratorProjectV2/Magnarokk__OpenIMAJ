package org.openimaj.util.hash.composition;

import java.util.ArrayList;
import java.util.List;

import org.openimaj.util.hash.HashFunction;
import org.openimaj.util.hash.HashFunctionFactory;

/**
 * {@link HashComposition}s are {@link HashFunction}s that compose the hash
 * codes generated by multiple hash functions applied to an object into a single
 * hash code for that object.
 * 
 * @author Jonathon Hare (jsh2@ecs.soton.ac.uk)
 * 
 * @param <OBJECT>
 *            Object being hashed
 */
public abstract class HashComposition<OBJECT> implements HashFunction<OBJECT> {
	protected List<HashFunction<OBJECT>> hashFunctions;

	/**
	 * Construct with the given functions.
	 * 
	 * @param functions
	 *            the underlying hash functions.
	 */
	public HashComposition(List<HashFunction<OBJECT>> functions) {
		this.hashFunctions = functions;
	}

	/**
	 * Construct with the given functions.
	 * 
	 * @param first
	 *            the first function
	 * @param remainder
	 *            the remainder of the functions
	 */
	public HashComposition(HashFunction<OBJECT> first, HashFunction<OBJECT>... remainder) {
		this.hashFunctions = new ArrayList<HashFunction<OBJECT>>();
		this.hashFunctions.add(first);

		for (final HashFunction<OBJECT> r : remainder)
			this.hashFunctions.add(r);
	}

	/**
	 * Construct with the factory which is used to produce the required number
	 * of functions.
	 * 
	 * @param factory
	 *            the factory to use to produce the underlying hash functions.
	 * @param nFuncs
	 *            the number of functions to create for the composition
	 */
	public HashComposition(HashFunctionFactory<OBJECT> factory, int nFuncs) {
		this.hashFunctions = new ArrayList<HashFunction<OBJECT>>();

		for (int i = 0; i < nFuncs; i++)
			hashFunctions.add(factory.create());
	}
}
