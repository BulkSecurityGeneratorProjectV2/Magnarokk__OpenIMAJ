package org.openimaj.util.array;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

import org.openimaj.io.ReadWriteable;

/**
 * A sparse array of double values
 * 
 * @author Jonathon Hare <jsh2@ecs.soton.ac.uk>
 *
 */
public abstract class Sparse#T#Array implements ReadWriteable {
	protected static final int DEFAULT_CAPACITY = 10;
	
	/**
	 * An entry in a {@link SparseDoubleArray}, consisting of
	 * an index and value.
	 * 
	 * @author Jonathon Hare <jsh2@ecs.soton.ac.uk>
	 */
	public static class Entry {
		/**
		 * The index in the array of the value
		 */
		public int index;
		
		/**
		 * The value of the array at the index 
		 */
		public #t# value;
	}
	
	/**
	 * The length of the array 
	 */
	public int length;
	
	/**
	 * Increment the value at the given index.
	 * 
	 * @param index the index
	 * @param value the amount to increment by.
	 * @return the new value 
	 */
	public abstract #t# increment(int index, #t# value);

	/**
	 * Provide an iterator over the non-zero values.
	 * <p>
	 * Note: the {@link Entry} returned by the iterator
	 * is always the same object. In addition, the iterator
	 * cannot affect the value of anything in the array (i.e.
	 * changing anything in the {@link Entry} has no effect
	 * on the actual array).
	 * 
	 * @return an iterator over the non-zero values.
	 */
	public abstract Iterable<Entry> entries();
	
	/**
	 * Get the value at the given index.
	 * @param index the index
	 * @return the value at the index.
	 */
	public abstract #t# get(int index);

	/**
	 * Check whether the given index is used (i.e. has a non-zero value)
	 * @param index the index
	 * @return true if not used; false otherwise.
	 */
	public abstract boolean isUsed(int index);

	/**
	 * Set the value at the given index.
	 * 
	 * @param index the index.
	 * @param value the value to set.
	 * @return the value
	 */
	public abstract #t# set(int index, #t# value);

	/**
	 * Set the length of the array. Arrays can only be
	 * extended with this method.
	 * @param newLength the new array length
	 * @throws IllegalArgumentException if the new length is shorter than 
	 * 		the existing length.
	 */
	public void setLength(int newLength) {
		if (newLength < this.length) throw new IllegalArgumentException("can't make sparse array shorter");
		this.length = newLength;
	}

	/**
	 * @return the length of the array
	 */
	public int size() {
		return length;
	}
	
	/**
	 * @return the length of the array
	 */
	public int length() {
		return length;
	}

	/**
	 * @return the number of non-zero entries in the array
	 */
	public abstract int used();
	
	/**
	 * @return the density of the array (number of used elements divided
	 * by array length)
	 */
	public float density() {
		return (float)used() / (float)length; 
	}
	
	/**
	 * Compact the space being used by the array if possible.
	 */
	public abstract void compact();
	
	/* (non-Javadoc)
	 * @see org.openimaj.io.WriteableASCII#writeASCII(java.io.PrintWriter)
	 */
	@Override
	public void writeASCII(PrintWriter out) throws IOException {
		out.print(this.length);
		out.print(" ");
		
		for (Entry e : entries()) {
			out.print(e.index + ":" + e.value + " ");			
		}
	}

	/* (non-Javadoc)
	 * @see org.openimaj.io.ReadableASCII#readASCII(java.util.Scanner)
	 */
	@Override
	public void readASCII(Scanner in) throws IOException {
		this.length = in.nextInt();
		
		String[] parts = in.nextLine().split(" ");
		for (String part : parts) {
			String[] bits = part.split(":");
			
			set(Integer.parseInt(bits[0]), #TT#.parse#T#(bits[1]));
		}
	}

	/* (non-Javadoc)
	 * @see org.openimaj.io.ReadableASCII#asciiHeader()
	 */
	@Override
	public String asciiHeader() {
		return "Sp#T#A";
	}

	/* (non-Javadoc)
	 * @see org.openimaj.io.WriteableBinary#writeBinary(java.io.DataOutput)
	 */
	@Override
	public void writeBinary(DataOutput out) throws IOException {
		out.writeInt(this.length);
		out.writeInt(this.used());
		for (Entry e : entries()) {
			out.writeInt(e.index);
			out.write#T#(e.value);			
		}
	}

	/* (non-Javadoc)
	 * @see org.openimaj.io.ReadableBinary#readBinary(java.io.DataInput)
	 */
	@Override
	public void readBinary(DataInput in) throws IOException {
		this.length = in.readInt();
		int used = in.readInt();
		for (int i=0; i<used; i++) {
			set(in.readInt(), in.read#T#());
		}
	}

	/* (non-Javadoc)
	 * @see org.openimaj.io.ReadableBinary#binaryHeader()
	 */
	@Override
	public byte[] binaryHeader() {
		return "Sp#T#A".getBytes();
	}
}
