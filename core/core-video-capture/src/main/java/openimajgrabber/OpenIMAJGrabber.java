package openimajgrabber;

import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPObject;
import org.bridj.cpp.CPPRuntime;

/**
 * <i>native declaration : line 1</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("OpenIMAJGrabber")
@Runtime(CPPRuntime.class)
public class OpenIMAJGrabber extends CPPObject {
	static {
		BridJ.addLibraryPath("/Users/jon/Library/Developer/Xcode/DerivedData/OpenIMAJGrabber-cjgjurkfjnnntaeaxsghmghtugna/Build/Products/Debug");
		BridJ.addLibraryPath("/Users/jsh2/Library/Developer/Xcode/DerivedData/OpenIMAJGrabber-dcttuoixsokmmzdbabxadyvszsxi/Build/Products/Debug");
		BridJ.register();
	}
	
	public OpenIMAJGrabber() {
		super();
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public OpenIMAJGrabber(Pointer pointer) {
		super(pointer);
	}
	
	public static native Pointer<DeviceList> getVideoDevices();
	
	public native Pointer<Byte > getImage();
	public native void nextFrame();
	public native boolean startSession(int width, int height);
	public native boolean startSession(int width, int height, Pointer<Device> devptr);
	public native void stopSession();
	public native int getWidth();
	public native int getHeight();
	
	/// C type : void*
	@Field(0) 
	protected Pointer<? > data() {
		return this.io.getPointerField(this, 0);
	}

	/// C type : void*
	@Field(0) 
	protected OpenIMAJGrabber data(Pointer<? > data) {
		this.io.setPointerField(this, 0, data);
		return this;
	}
}
