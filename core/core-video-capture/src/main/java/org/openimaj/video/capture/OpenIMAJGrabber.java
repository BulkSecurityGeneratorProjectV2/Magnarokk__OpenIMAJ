/**
 * Copyright (c) 2011, The University of Southampton and the individual contributors.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *   * 	Redistributions of source code must retain the above copyright notice,
 * 	this list of conditions and the following disclaimer.
 *
 *   *	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 *
 *   *	Neither the name of the University of Southampton nor the names of its
 * 	contributors may be used to endorse or promote products derived from this
 * 	software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.openimaj.video.capture;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

import org.bridj.BridJ;
import org.bridj.Platform;
import org.bridj.Pointer;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;
import org.bridj.cpp.CPPObject;
import org.bridj.cpp.CPPRuntime;

/**
 * <i>native declaration : line 1</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("OpenIMAJGrabber")
@Runtime(CPPRuntime.class)
public class OpenIMAJGrabber extends CPPObject {
	static {
		String libprefix = "/org/openimaj/video/capture/nativelib/";

		String libraryResource = null;
		for (String s : getEmbeddedLibraryResource("OpenIMAJGrabber")) {
			if (VideoCapture.class.getResource(libprefix + s) != null) {
				libraryResource = libprefix + s;
				break;
			}
		}

		if (libraryResource == null) {
			throw new RuntimeException("Unable to load platform library");
		}

		String directory = null;
		try {
			File file = extractEmbeddedLibraryResource(libraryResource);
			directory = file.getAbsoluteFile().getParent();
		} catch (IOException e) {
			throw new RuntimeException("Error unpacking platform library");
		}

		//BridJ.addLibraryPath("/Users/jsh2/Library/Developer/Xcode/DerivedData/OpenIMAJGrabber-dcttuoixsokmmzdbabxadyvszsxi/Build/Products/Debug");
//		BridJ.addLibraryPath("/home/jsh2/Grabber/OpenIMAJGrabber/bin/Debug");
		BridJ.addLibraryPath(directory);
		BridJ.register();
	}

	public OpenIMAJGrabber() {
		super();
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public OpenIMAJGrabber(Pointer pointer) {
		super(pointer);
	}

	public native Pointer<DeviceList> getVideoDevices();

	public native Pointer<Byte > getImage();
	public native void nextFrame();
	public native boolean startSession(int width, int height);
	public native boolean startSession(int width, int height, Pointer<Device> devptr);
	public native void stopSession();
	public native int getWidth();
	public native int getHeight();

	/// C type : void*
	@Field(0) 
	protected Pointer<? > data() {
		return this.io.getPointerField(this, 0);
	}

	/// C type : void*
	@Field(0) 
	protected OpenIMAJGrabber data(Pointer<? > data) {
		this.io.setPointerField(this, 0, data);
		return this;
	}


	static Collection<String> getEmbeddedLibraryResource(String name) {
		if (Platform.isWindows())
			return Collections.singletonList((Platform.is64Bits() ? "win64/" : "win32/") + name + ".dll");
		if (Platform.isMacOSX()) {
			String generic = "darwin_universal/lib" + name + ".dylib";
			if (Platform.isAmd64Arch())
				return Arrays.asList("darwin_x64/lib" + name + ".dylib", generic);
			else
				return Collections.singletonList(generic);
		}
		if (Platform.isLinux())
			return Collections.singletonList((Platform.is64Bits() ? "linux_x64/lib" : "linux_x86/lib") + name + ".so");

		throw new RuntimeException("Platform not supported ! (os.name='" + System.getProperty("os.name") + "', os.arch='" + System.getProperty("os.arch") + "')");
	}

	static File extractEmbeddedLibraryResource(String libraryResource) throws IOException {
		File libdir = File.createTempFile(new File(libraryResource).getName(), null);
		libdir.delete();
		libdir.mkdir();
		libdir.deleteOnExit();
		
		File libFile = new File(libdir, new File(libraryResource).getName());
		libFile.deleteOnExit();
		
		InputStream in = VideoCapture.class.getResourceAsStream(libraryResource);
		OutputStream out = new BufferedOutputStream(new FileOutputStream(libFile));
		
		int len;
		byte[] b = new byte[8196];
		while ((len = in.read(b)) > 0)
			out.write(b, 0, len);
		
		out.close();
		in.close();

		return libFile;
	}
}
